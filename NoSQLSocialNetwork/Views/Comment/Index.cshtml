@using NoSQLSocialNetwork.Entities
@using NoSQLSocialNetwork.ViewModels
@{
    ViewData["Title"] = "Socialbook";
}

@model PostVM

<div class="post-container">
    <div class="post-row">
        <div class="user-profile">
            <img src="@Model.AuthorAvatar">
            <div>
                <p>@Model.AuthorName</p>
                <span>@Model.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
            </div>
        </div>
        <a href="#">
            <i class="fa fa-ellipsis-v"></i>
        </a>
    </div>

    <p class="post-text">
        @Model.Content
    </p>

    <div class="post-images-grid" data-images="@string.Join(",", Model.ImageUrls ?? new List<string>())">
        @if (Model.ImageUrls != null && Model.ImageUrls.Any())
        {
            var visibleImages = Model.ImageUrls.Take(2).ToList();
            foreach (var image in visibleImages)
            {
                <img src="@image" class="post-img" alt="Image @image">
            }
            if (Model.ImageUrls.Count() > 2)
            {
                <div class="more-images">
                    +@((Model.ImageUrls.Count() - 2)) more
                </div>
            }
        }
    </div>

    <div class="post-row">
        <div class="activity-icons">
            <div>
                @Html.AntiForgeryToken()
                <a href="#" name="btnLike" id="btnLike_@Model.Id">
                    @if (Model.IsLiked)
                    {
                        <img src="images/like-blue.png" alt="Like">
                    }
                    else
                    {
                        <img src="images/like.png" alt="Like">
                    }
                </a>
                <span>@(Model.Likes?.Count() ?? 0)</span>
            </div>

            <div>
                <img src="images/share.png" alt="Share">
            </div>
        </div>

    </div>
    <div class="comments-section">
        <div class="comment-input">
            <form id="commentForm" method="post" action="@Url.Action("AddComment", "Post", new { postId = Model.Id })">
                <textarea name="Content" id="commentContent" placeholder="Viết bình luận..."></textarea>
                <button type="submit">Bình luận</button>
            </form>
        </div>

        <div class="comments-list">
            @foreach (var comment in Model.Comments ?? new List<CommentVM>())
            {
                <div class="comment-item">
                    <div class="comment-author">
                        <img src="@comment.AvatarUrl" alt="Avatar">
                        <p>@comment.FullName</p>
                    </div>
                    <p>@comment.Content</p>
                    <span>@comment.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
                </div>
            }
        </div>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            $('#commentForm').on('submit', function (e) {
                e.preventDefault(); // Ngừng hành động mặc định là tải lại trang

                var content = $('#commentContent').val().trim(); // Lấy nội dung bình luận và loại bỏ khoảng trắng
                if (!content) {
                    alert('Nội dung bình luận không được để trống.');
                    return;
                }

                var postId = '@Model.Id'; // Lấy postId từ Model

                // Gửi yêu cầu AJAX
                $.ajax({
                    url: '@Url.Action("AddComment", "Comment")',
                    method: 'POST',
                    contentType: 'application/json', // Định nghĩa dữ liệu là JSON
                    data: JSON.stringify({
                        Content: content,
                        PostId: postId
                    }),
                    success: function (response) {
                        console.log("Server response:", response); // Kiểm tra phản hồi từ server
                        if (response.success) {
                            // Tạo HTML cho bình luận mới
                            var newComment = `
                                <div class="comment-item">
                                    <div class="comment-author">
                                        <img src="${response.avatarUrl}" alt="Avatar">
                                        <p>${response.fullName}</p>
                                    </div>
                                    <p>${response.content}</p>
                                    <span>${response.createdAt}</span>
                                </div>`;
                            $('.comments-list').append(newComment); // Thêm bình luận vào danh sách
                            $('#commentContent').val(''); // Xóa nội dung trong textarea
                        } else {
                            alert(response.message || 'Có lỗi xảy ra, vui lòng thử lại.');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error details:", xhr.responseText);
                        alert('Có lỗi xảy ra, vui lòng thử lại.');
                    }
                });
            });
        });

    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('[name="btnLike"]').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    const likeButton = this;
                    const imgLike = likeButton.querySelector('img');
                    const postId = this.id.split('_')[1];
                    const isLiked = imgLike.src.includes('like-blue.png');
                    imgLike.src = isLiked ? 'images/like.png' : 'images/like-blue.png';
                    fetch(`/api/Post/Like`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ postId })
                    })
                        .then(response => response.json())
                        .then(data => {
                            const likeCountElement = likeButton.nextElementSibling;
                            likeCountElement.textContent = data.likesCount;
                        })
                        .catch(error => {
                            imglike.src = isliked ? 'images/like-blue.png' : 'images/like.png';
                        });
                });
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $(".load-more-btn").click(function () {
                $.ajax({
                    url: "/Home/LoadMore",
                    type: "GET",
                    success: function (data) {
                        $(".post-container:last").after(data);
                    }
                });
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $(".post-images-grid").on("click", ".more-images", function () {
                var $this = $(this);
                var $postImagesGrid = $this.parent();

                // Get the images from the data-attribute
                var images = $postImagesGrid.data("images").split(",");

                // Clear existing images and add all images from the data
                $postImagesGrid.empty();
                images.forEach(function (image) {
                    $postImagesGrid.append('<img src="' + image + '" class="post-img" alt="Image ' + image + '">');
                });
            });
        });
    </script>
    <script>
        // Khi nhấn vào nút "Đăng bài"
        $('#submitPostBtn').on('click', function () {
            var content = $('#post_content').val();
            var formData = new FormData();
            formData.append("Content", content);

            // Lấy hình ảnh nếu có
            var files = $('#post_images')[0].files;
            for (var i = 0; i < files.length; i++) {
                formData.append("Images", files[i]);
            }

            // Gửi yêu cầu POST đến Controller (CreatePost)
            $.ajax({
                url: '/api/Post/Create',  // Đảm bảo đường dẫn chính xác tới controller
                type: 'POST',
                data: formData,
                processData: false,  // Đảm bảo không xử lý dữ liệu
                contentType: false,  // Đảm bảo không thay đổi kiểu dữ liệu
                success: function (response) {
                    // Hiển thị thông báo thành công
                    $('#responseMessage').html('Bài viết đã được đăng thành công!').addClass('success-message show-message').show();
                    // Reset form sau khi đăng bài
                    $('#post_content').val('');
                    $('#post_images').val('');
                     location.reload();
                },
                error: function (xhr, status, error) {
                    // Hiển thị thông báo lỗi nếu có
                    $('#responseMessage').html('Có lỗi xảy ra. Vui lòng thử lại!').addClass('error-message show-message').show();
                }
            });
        });

        // Hàm để chọn ảnh
        function chooseImage() {
            $('#post_images').click();
        }
    </script>
}
